using AuthorizationService;
using IdentityService.Api.Endpoints;
using IdentityService.Api.ServiceCollectionExtensions;
using IdentityService.Application.Handlers;
using AuthorizationService.DAL;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using OpenIddict.Abstractions;
using Scalar.AspNetCore;
using Serilog;

var builder = WebApplication.CreateBuilder(args);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
builder.Services.AddAuthorization();
builder.Services.AddOpenApi();

// üîπ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Serilog + Seq
builder.Host.UseSerilog((context, config) =>
{
    config.WriteTo.Console()
          .WriteTo.Seq("http://localhost:8001");
});

// üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
builder.Services.ConfigureDb(builder.Configuration);

// üîπ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Identity
builder.Services.ConfigureIdentity();

// üîπ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º OpenIddict
builder.Services.ConfigureOpenIddict();

// –î–æ–±–∞–≤–ª—è–µ –º–µ–¥–∏–∞—Ç—Ä
builder.Services.AddMediatR(options =>
{
    options.RegisterServicesFromAssemblyContaining<DiMediatrDetector>();
});


// Build Application
var app = builder.Build();

// Open Api
app.ConfigureScalar();

// üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware
app.UseRouting();
app.UseAuthentication();     
app.UseAuthorization();

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Endpoints
app.ConfigureEndpoints();


app.Run();
